import React, { useState } from "react";
import axios from 'axios'; // Axios ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
import "../App.css";

const API_BASE_URL = 'http://localhost:8080/users/'; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API-‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßá‡¶∏ URL

function Settings({ user, logout, onMenuClick }) {
  const [name, setName] = useState(user.name);
  const [email, setEmail] = useState(user.email);
  const [message, setMessage] = useState("");
  const [saving, setSaving] = useState(false); // ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

  // Update user profile
  const handleSave = async () => {
    setSaving(true);
    setMessage(""); // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    const token = localStorage.getItem("jwtToken"); // JWT ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã

    try {
      const res = await axios.put(
        `${API_BASE_URL}${user.id}`, // ‡¶°‡¶æ‡¶á‡¶®‡¶æ‡¶Æ‡¶ø‡¶ï URL
        { name, email },
        {
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`, // üîë JWT ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
          },
        }
      );

      if (res.status === 200) { // Axios-‡¶è ‡¶∏‡¶´‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 200
        setMessage("‚úÖ Profile updated successfully!");
      } else {
        setMessage("‚ùå Failed to update profile.");
      }
      
      setTimeout(() => setMessage(""), 3000);
      
    } catch (err) {
      console.error("API Error:", err);
      // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
      if (err.response && err.response.status === 401) {
          setMessage("‚ùå Update failed. Please log in again.");
      } else {
          setMessage("‚ùå Error updating profile. Check server status.");
      }
      setTimeout(() => setMessage(""), 3000);
    } finally {
      setSaving(false); // ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ‡¶ü‡¶® ‡¶è‡¶®‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ
    }
  };

  return (
    <div className="dashboard">
      {/* Sidebar */}
      <div className="sidebar">
        <div className="logo">TradeShift</div>
        <ul className="menu">
          <li onClick={() => onMenuClick("dashboard")}>Portfolio</li>
          <li onClick={() => onMenuClick("orders")}>Orders</li>
          <li onClick={() => onMenuClick("analytics")}>Analytics</li>
          <li className="active" onClick={() => onMenuClick("settings")}>Settings</li>
        </ul>
      </div>

      {/* Main content */}
      <div className="settings-content-area">
        {/* ‡¶ü‡¶™-‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶π‡ßá‡¶°‡¶æ‡¶∞, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá */}
        <header className="top-bar">
             <button className="logout-btn top-logout" onClick={logout}>
                Logout üö™
             </button>
        </header>

        <div className="settings-container">
          <h2>Account Settings</h2>

          <section className="profile-section card-shadow">
            <h3>General Profile Information</h3>
            <div className="form-group">
                <label>
                  <strong>Name:</strong>
                  <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                  />
                </label>
            </div>
            
            <div className="form-group">
                <label>
                  <strong>Email:</strong>
                  {/* ‡¶á‡¶Æ‡ßá‡¶≤ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ disabled ‡¶•‡¶æ‡¶ï‡ßá */}
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    disabled 
                  />
                </label>
            </div>
            
            <button 
                className="save-btn" 
                onClick={handleSave} 
                disabled={saving} // üîí ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ
            >
              {saving ? 'Saving...' : 'Save Changes'}
            </button>
            {message && <div className={`message ${message.includes('success') ? 'success' : 'error'}`}>{message}</div>}
          </section>
        </div>
      </div>
    </div>
  );
}

export default Settings;
